REST API Design
• When should URI path segments be named with plural nouns?
• Which request method should be used to update resource state?
• How do I map non-CRUD operations to my URIs?
• What is the appropriate HTTP response status code for a given scenario?
• How can I manage the versions of a resource’s state representations?
• How should I structure a hyperlink in JSON?

Resource Archetypes
- Document
- Collection
- Store
- Controller

DOCUMENT ARCHETYPE
- Base archetype
- Something that represents fields with values
- Document is a logical candidate for REST APIs root resource, also known as docroot

Examples
http://api.soccer.restapi.org/leagues/seattle
http://api.soccer.restapi.org/leagues/seattle/teams/trebuchet
http://api.soccer.restapi.org/leagues/seattle/teams/trebuchet/players/mike

Docroot example: http://api.soccer.restapi.org

COLLECTION ARCHETYPE
- Server managed directory of resources
Example
http://api.soccer.restapi.org/leagues


STORE ARCHETYPE
- Client managed resource repository
Example
PUT /users/1234/favorites/alonso

CONTROLLER ARCHETYPE
- Its a procedural concept
- Something like executable functions with parameters and return values
- i.e. Inputs and Outputs
- Rest Apis rely on controllers for actions that can not be mapped with CRUD methods
Example
POST /alerts/245743/resend


URI Format
 URI = scheme "://" authority "/" path [ "?" query ] [ "#" fragment ]

 Rule
 Forward slash separator (/) must be used to indicate a hierarchical
 relationship
 http://api.canvas.restapi.org/shapes/polygons/quadrilaterals/squares

 Rule
 A trailing forward slash (/) should not be included in URIs
 Many web components and frameworks will treat the following two URIs equally:
 http://api.canvas.restapi.org/shapes/
 http://api.canvas.restapi.org/shapes

 Rule: 
 Hyphens (-) should be used to improve the readability of URIs
 http://api.example.restapi.org/blogs/mark-masse/entries/this-is-my-first-post

 Rule: Underscores (_) should not be used in URIs

 Rule: Lowercase letters should be preferred in URI paths
 http://api.example.restapi.org/my-folder/my-doc
 HTTP://API.EXAMPLE.RESTAPI.ORG/my-folder/my-doc
 http://api.example.restapi.org/My-Folder/my-doc

 1. This URI is fine.
 2. The URI format specification (RFC 3986) considers this URI to be identical to URI #1
 3. This URI is not the same as URIs 1 and 2, which may cause unnecessary confusion.


 Rule: File extensions should not be included in URIs


URI Authority Design

	Rule: Consistent subdomain names should be used for your APIs
	Rule: Consistent subdomain names should be used for your client developer
portal
	http://developer.soccer.restapi.org

URI Path Design
	Rule: A singular noun should be used for document names
	Rule: A plural noun should be used for collection names
	Rule: A plural noun should be used for store names
	Rule: A verb or verb phrase should be used for controller names
	Rule: Variable path segments may be substituted with identity-based
values
	Example:http://api.soccer.restapi.org/leagues/{leagueId}/teams/{teamId}/players/{playerId}

	Rule: CRUD function names should not be used in URIs

	For example, this API interaction design is preferred:
	DELETE /users/1234
	
	The following anti-patterns exemplify what not to do:
	GET /deleteUser?id=1234
	GET /deleteUser/1234
	DELETE /deleteUser/1234
	POST /users/1234/delete

URI Query Design
	Rule: The query component of a URI may be used to filter collections or stores

	Example:
	GET /users
	GET /users?role=admin
	The response message’s state representation contains a listing of all the users in the
	collection.
	The response message’s state representation contains a filtered list of all the users in
	the collection with a “role” value of admin.

	Rule: The query component of a URI should be used to paginate collection
	or store results

	Simple Example:
	GET /users?pageSize=25&pageStartIndex=50

	For complex queries
	POST /users/search

Request Methods
	Request-Line = Method SP Request-URI SP HTTP-Version CRLF
	
	GET 	is to retrieve a representation of a resource’s state.
	HEAD	is used to retrieve the metadata associated with the resource’s state (RESPONSE HEADERS)
	PUT	should be used to add a new resource to a store or update a resource.
	POST	should be used to create a new resource within a collection and execute controllers.
	DELETE	removes a resource from its parent.

	Rule: GET and POST must not be used to tunnel other request methods
	Rule: GET must be used to retrieve a representation of a resource
	Rule: HEAD should be used to retrieve response headers
		Clients can use this method to check whether a resource exists or to read its metadata.
	Rule: PUT must be used to both insert and update a stored resource
	Rule: PUT must be used to update mutable resources
	Rule: POST must be used to create a new resource in a collection
	Rule: POST must be used to execute controllers
	Rule: DELETE must be used to remove a resource from its parent
		Once a DELETE request has been processed for a given resource, the resource can no longer be found by clients. Therefore, any future
attempt to retrieve the resource’s state representation, using either GET or HEAD, must result in a 404 (“Not Found”) status returned by the API
	
	Rule: OPTIONS should be used to retrieve metadata that describes a resource’s available interactions
	
Response Status Codes

	Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF
	
	Category Description
		1xx: Informational Communicates transfer protocol-level information.
		2xx: Success Indicates that the client’s request was accepted successfully.
		3xx: Redirection Indicates that the client must take some additional action in order to complete their request.
		4xx: Client Error This category of error status codes points the finger at clients.
		5xx: Server Error The server takes responsibility for these error status codes.

	Rule: 200 (“OK”) should be used to indicate nonspecific success
		Unlike the 204, a 200 response should include a response body
	Rule: 200 (“OK”) must not be used to communicate errors in the response body
	Rule: 201 (“Created”) must be used to indicate successful resource creation
	Rule: 202 (“Accepted”) must be used to indicate successful start of anasynchronous action
	Rule: 204 (“No Content”) should be used when the response body is intentionally empty
	Rule: 301 (“Moved Permanently”) should be used to relocate resources
	Rule: 302 (“Found”) should not be used
	Rule: 303 (“See Other”) should be used to refer the client to a different URI
	Rule: 304 (“Not Modified”) should be used to preserve bandwidth
	Rule: 307 (“Temporary Redirect”) should be used to tell clients to resubmit the request to another URI
	Rule: 400 (“Bad Request”) may be used to indicate nonspecific failure
	Rule: 401 (“Unauthorized”) must be used when there is a problem with the client’s credentials
	Rule: 403 (“Forbidden”) should be used to forbid access regardless of authorization state
	Rule: 404 (“Not Found”) must be used when a client’s URI cannot be mapped to a resource
	Rule: 405 (“Method Not Allowed”) must be used when the HTTP method is not supported
	Rule: 406 (“Not Acceptable”) must be used when the requested media type cannot be served
		The 406 error response indicates that the API is not able to generate any of the client’s preferred media types, as indicated by the Accept request header. For example, a client request for data formatted as application/xml will receive a 406 response if the API is only willing to format data as application/json.
	Rule: 409 (“Conflict”) should be used to indicate a violation of resource state
	Rule: 412 (“Precondition Failed”) should be used to support conditional operations
	Rule: 415 (“Unsupported Media Type”) must be used when the media type of a request’s payload cannot be processed
	Rule: 500 (“Internal Server Error”) should be used to indicate API malfunction

HTTP HEADERS
	Rule: Content-Type must be used
	Rule: Content-Length should be used
	Rule: Last-Modified should be used in responses
		Clients and cache intermediaries may rely on this header to determine the freshness of their local copies of a resource’s state representation.This header should always be supplied in response to GET requests.
	Rule: ETag should be used in responses
	Rule: Stores must support conditional PUT requests
		A REST API must rely on the client to include the If-Unmodified-Since and/or If-Match request headers to express their intent
	Rule: Location must be used to specify the URI of a newly created resource
	Rule: Cache-Control, Expires, and Date response headers should be used to encourage caching
	Rule: Cache-Control, Expires, and Pragma response headers may be used to discourage caching
	Rule: Caching should be encouraged
	Rule: Expiration caching headers should be used with 200 (“OK”) responses
	Rule: Expiration caching headers may optionally be used with 3xx and 4xx responses
	Rule: Custom HTTP headers must not be used to change the behavior of HTTP methods
	
MEDIA TYPES
	Media type syntax
	type "/" subtype *( ";" parameter )
	Examples:
	Content-type: text/html; charset=ISO-8859-4
	Content-type: text/plain; charset="us-ascii"

	The type value may be one of: application, audio, image, message, model, multipart,
	text, or video. A typical REST API will most often work with media types that fall under
	the application type

Registered Media Types
	text/plain
	text/html
	image/jpeg
	application/xml
	application/atom+xml
	application/javascript
	application/json
Vendor specific Media Types
	application/vnd.ms-excel
	application/vnd.lotus-notes
	text/vnd.sun.j2me.app-descriptor	

Media Type Design
	Rule: Application-specific media types should be used
	Rule: Media type negotiation should be supported when multiple representations are available
	Rule: Media type selection using a query parameter may be supported
	Examples:
		GET /bookmarks/mikemassedotcom?accept=application/xml

MESSAGE BODY FORMAT
	Rule: JSON should be supported for resource representation
	Rule: JSON must be well-formed
	
	JSON names should use mixed lower case and should avoid special characters whenever
possible. In JavaScript, JSON names like fooBar are preferred since they allow the
use of the cleaner dot notation for property access. For example:
var.fooBar
Names like foo-bar require the use of JavaScript’s less elegant bracket notation to access
the property, such as:
var["foo-bar"]


	Rule: XML and other formats may optionally be used for resource representation
	Rule: Additional envelopes must not be created
	
HYPERMEDIA REPRESENTATION
	Rule: A consistent form should be used to represent links
	Rule: A consistent form should be used to advertise links
	Rule: A self link should be included in response message body representations
	Rule: Links should be used to advertise a resource’s available actions in a state-sensitive manner
	
MEDIA TYPE REPRESENTATION
	Rule: A consistent form should be used to represent media type formats
	Rule: A consistent form should be used to represent media type schemas
	
VERSIONING
	Rule: New URIs should be used to introduce new concepts
	Rule: Schemas should be used to manage representational form versions
	Rule: Entity tags should be used to manage representational state versions

SECURITY
	Rule: OAuth may be used to protect resources
	Rule: API management solutions may be used to protect resources
	
Response Representation Composition
	Rule: The query component of a URI should be used to support partial responses
	
	Example:
	# Request
	GET /students/morgan?fields=(firstName, birthDate) HTTP/1.1
	Host: api.college.restapi.org
	

	#respone
	{
	"firstName" : "Morgan",
	"birthDate" : "1992-07-31"
	}

	Rule: The query component of a URI should be used to embed linked resources

JAVA SCRIPT CLIENTS
	Rule: CORS should be supported to provide multi-origin read/write access from JavaScript
	Rule: JSONP should be supported to provide multi-origin read access from JavaScript
	















	















































